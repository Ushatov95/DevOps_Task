trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: environment
    type: string
    default: 'dev'
    values:
      - dev
      - acc
      - prd
  - name: infra_to_deploy
    type: string
    default: 'task-1'
    values:
      - task-1
      - task-2

variables:
  - name: serviceConnectionName
    value: 'zetta-sp'
  - name: backendAzureRmResourceGroupName
    value: 'zetta-terraform-state'
  - name: backendAzureRmStorageAccountName
    value: 'zettatfstatedevopstask'
  - name: backendAzureRmContainerName
    value: 'zettatfstate$-{{ parameters.infra_to_deploy }}'
  - name: notifyUsers
    value: ''  # Replace with actual approvers
  - name: workingDirectory
    value: '$(System.DefaultWorkingDirectory)/terraform/${{ parameters.infra_to_deploy }}-infra'
  - name: containerName
    value: 'zettatfstate-${{ parameters.infra_to_deploy }}'
  - name: stateKey
    value: '${{ parameters.infra_to_deploy }}-${{ parameters.environment }}.tfstate'

stages:
- stage: InfrastructureDeploy
  displayName: 'Infrastructure Deployment'
  jobs:
    - job: TerraformPlan
      displayName: 'Terraform Plan'
      steps:
        - task: TerraformInstaller@1
          displayName: 'Install Terraform'
          inputs:
            terraformVersion: '1.12.1'
          condition: succeeded()

        - task: TerraformTaskV4@4
          displayName: 'Terraform Init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(workingDirectory)'
            backendServiceArm: '$(serviceConnectionName)'
            backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
            backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
            backendAzureRmContainerName: 'zettatfstate-${{ parameters.infra_to_deploy }}'
            backendAzureRmKey: '$(stateKey)'

        - task: TerraformTaskV4@4
          displayName: 'Terraform Validate'
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(workingDirectory)'

        - task: TerraformTaskV4@4
          displayName: 'Terraform Plan'
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(workingDirectory)'
            environmentServiceNameAzureRM: '$(serviceConnectionName)'
            commandOptions: '-var-file="../environments/${{ parameters.environment }}.tfvars"'

    - job: ManualValidation
      displayName: 'Wait for Approval'
      dependsOn: TerraformPlan
      condition: succeeded()
      pool: server
      steps:
        - task: ManualValidation@0
          inputs:
            notifyUsers: '$(notifyUsers)'
            instructions: 'Please review the Terraform plan and approve the deployment'
            onTimeout: 'reject'

    - job: TerraformApply
      displayName: 'Terraform Apply'
      dependsOn: ManualValidation
      condition: succeeded()
      steps:

        - task: TerraformInstaller@1
          inputs:
            terraformVersion: 'latest'
        
        - task: TerraformTaskV4@4
          displayName: 'Terraform Init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(workingDirectory)'
            backendServiceArm: '$(serviceConnectionName)'
            backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
            backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
            backendAzureRmContainerName: '$(containerName)'
            backendAzureRmKey: '$(stateKey)'

        - task: TerraformTaskV4@4
          displayName: 'Terraform Apply'
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(workingDirectory)'
            environmentServiceNameAzureRM: '$(serviceConnectionName)'
            commandOptions: '-var-file="../environments/${{ parameters.environment }}.tfvars"'
